% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/copy_dots.R
\name{copy_dots}
\alias{copy_dots}
\title{Copy ellipsis arguments from one set of functions to a wrapper function}
\usage{
copy_dots(...)
}
\arguments{
\item{...}{A list of functions. The last function in the list is used as
a \emph{destination} function, and all previous functions in the list are
considered \emph{source} functions. Arguments from the \emph{source} functions
that do not already appear in the definition of the \emph{destination} function
are copied into the function definition of a wrapper around the
\emph{destination} function.}
}
\description{
Copies arguments from multiple source functions into a destination function
that uses the ellipsis (\code{...}) to pass arguments to those functions in
order to improve documentation.
}
\examples{

# Given these function definitions:
inner_function = function(x, y = "old_y_default", z = "z_default") {
  cat(x, " ", y, " ", z, "\n")
}
outer_function = function(y = "new_y_default", ...) {
  inner_function(y = y, ...)
}

# the argument list and documentation of outer_function above will not
# include parameters from inner_function, making it harder to
# understand. However, copying out these arguments manually is not
# a great solution either. `copy_dots()` lets us do this automatically:
outer_function = copy_dots(inner_function, function(y = "new_y_default", ...) {
  inner_function(y = y, ...)
})

# The resulting definition of `outer_function` is equivalent to this:
outer_function = function(y = "new_y_default", ..., x, z = "z_default") {
  (function (y = "new_y_default", ...) {
    inner_function(y = y, ...)
  })(y = y, ..., x = x, z = z)
}

}
\seealso{
\code{\link[=inner_function]{inner_function()}} and \code{\link[=outer_function]{outer_function()}} for examples of the
documentation generated by functions using \code{copy_dots()} like those in
the example below.
}
